%\documentclass[10pt,handout]{beamer}
\documentclass[11pt]{beamer}
%\documentclass[11pt, handout]{beamer}
%\usepackage{handoutWithNotes}
%\usepackage{pgfpages}
\usepackage{etex} % helps fix \newdimen error which is cause when ctable is loaded with other packages
\usepackage{comment}
\usepackage{ctable}
\usepackage{amsmath,amsthm,amssymb}
\newtheorem{rcode}{R code}[section]
\usepackage{url}

%\usepackage[usenames]{xcolor}
\usepackage{color, colortbl}
\usepackage{tikz}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{ae}
%\usepackage{aeguill}

\usetikzlibrary{shapes.geometric, arrows,shapes.symbols,decorations.pathreplacing}
\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm, draw=black, fill=pinkish,text width=3.5cm]
\tikzstyle{startstop2} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm, draw=black, fill=background,text width=2.5cm]
\tikzstyle{startstop3} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm, draw=black, fill=beige,text width=3.0cm]
\tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110, minimum width=2cm, minimum height=1cm, text centered, draw=black, fill=blue!30,text width=1.5cm]
\tikzstyle{process} = [rectangle, minimum width=1cm, minimum height=1cm, text centered, draw=black, fill=orange!30,text width=2cm]
\tikzstyle{decision} = [diamond, minimum width=2cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]
\tikzstyle{both} = [thick,<->,>=stealth, red]

\tikzset{myshade/.style={minimum size=.4cm,shading=radial,inner color=white,outer color={#1!90!gray}}}
\newcommand\mycirc[1][]{\tikz\node[circle,myshade=#1]{};}
\newcommand\myrect[1][]{\tikz\node[rectangle,myshade=#1]{};}
\newcommand\mystar[1][]{\tikz\node[star,star points=15,star point height=2pt,myshade=#1]{};}
\newcommand\mydiamond[1][]{\tikz\node[diamond,myshade=#1]{};}
\newcommand\myellipse[1][]{\tikz\node[ellipse,myshade=#1]{};}
\newcommand\mykite[1][]{\tikz\node[kite,myshade=#1]{};}
\newcommand\mydart[1][]{\tikz\node[dart,myshade=#1]{};}
\newcommand\mycloud[1][]{\tikz\node[cloud,myshade=#1]{};}

%\usepackage{subcaption}
\usepackage{subfig}
%\usepackage{caption}

\mode<presentation>
\usetheme{Hannover}
\usecolortheme{rose}
\setbeamertemplate{navigation symbols}{}
\setbeamertemplate{footline}[frame number]
\setbeamertemplate{caption}[numbered]
\setbeamertemplate{frametitle}[default][left]

\usepackage[]{hyperref}
\hypersetup{
    unicode=false,          
    pdftoolbar=true,        
    pdfmenubar=true,        
    pdffitwindow=false,     % window fit to page when opened
    pdfstartview={FitH},    % fits the width of the page to the window
    pdftitle={atelier R GERAD},    % title
    pdfauthor={Sahir Rai Bhatnagar},     % author
    pdfsubject={Subject},   % subject of the document
    pdfcreator={Sahir Rai Bhatnagar},   % creator of the document
    pdfproducer={Sahir Rai Bhatnagar}, % producer of the document
    pdfkeywords={}, % list of keywords
    pdfnewwindow=true,      % links in new window
    colorlinks=true,       % false: boxed links; true: colored links
    linkcolor=red,          % color of internal links (change box color with linkbordercolor)
    citecolor=blue,        % color of links to bibliography
    filecolor=black,      % color of file links
    urlcolor=cyan           % color of external links
}

%\RequirePackage{color}

% define a bunch of colors
\definecolor{gray}{RGB}{110,110,110}
\definecolor{darkgray}{RGB}{100,100,100}
\definecolor{lightgray}{RGB}{200,200,200}
\definecolor{turquoise}{RGB}{81,193,188}
\definecolor{tomato}{RGB}{255,136,136}
\definecolor{mandarina}{RGB}{229,169,25}
\definecolor{foreground}{RGB}{81,141,193}
\definecolor{background}{RGB}{246,244,240}
\definecolor{highlight}{RGB}{229,169,25}
\definecolor{lowlight}{RGB}{200,200,200}
\definecolor{beige}{RGB}{255,255,240}
\definecolor{pinkish}{RGB}{255,223,247}
%\definecolor{aliceblue}{rgb}{0.94, 0.97, 1.0}
%\definecolor{antiflashwhite}{rgb}{0.95, 0.95, 0.96}

% some convenient commands
\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\high}[1]{\textcolor{highlight}{#1}}
\newcommand{\low}[1]{\textcolor{lowlight}{#1}}
\newcommand{\highcode}[1]{\textcolor{highlight}{\texttt{#1}}}

\setbeamercolor{block body}{bg=beige}
\setbeamertemplate{theorems}[numbered] % so that you can number the R code theorem environments

%\setbeamercovered{highly dynamic}

\newcounter{saveenumi}
\newcommand{\seti}{\setcounter{saveenumi}{\value{enumi}}}
\newcommand{\conti}{\setcounter{enumi}{\value{saveenumi}}}


%\setbeamercolor{subtitle}{fg=turquoise}

%\pgfpagesuselayout{4 on 1}[a4paper, landscape, border shrink=5mm]
%\pgfpagesuselayout{2 on 1 with notes landscape}[a4paper, border shrink=5mm]
\begin{document}


<<setup, echo=FALSE,warning=FALSE,message=FALSE,cache=FALSE, results='hide'>>=
#options(width=60, digits=2)
set.seed(45)
opts_chunk$set(echo = TRUE, tidy = FALSE, cache = FALSE, warning = FALSE, message = FALSE)
knit_hooks$set(crop = hook_pdfcrop)
opts_template$set(
    fig.large = list(fig.width = 7, fig.height = 5, fig.align = 'center', crop = TRUE, fig.pos = 'h'),
    fig.small = list(fig.width = 6, fig.height = 4, fig.align = 'center', crop = TRUE, fig.pos = 'h'),
    fig.full = list(fig.width = 8, fig.height = 6, fig.align = 'center', crop = TRUE, fig.pos = 'h')
)
# smaller font size for chunks
#opts_chunk$set(size = 'tiny')
thm <- knit_theme$get("bclear")
knit_theme$set(thm)
options(width=78, digits = 2)
knit_hooks$set(rcode=function(before, options, envir)
{
if (before)
sprintf('\\begin{rcode}\\label{%s}', options$label)
else
'\\end{rcode}'
})

knit_hooks$set(frame=function(before, options, envir)
{
if (before)
sprintf('\\begin{frame}[fragile]\\hfill{}', options$label)
else
'\\end{frame}'
})
knitr::read_chunk("slides-packages.R")
@

<<required-packages,echo=FALSE,warning=FALSE,message=FALSE>>=
@

\title[Atelier sur le logiciel R]{Atelier sur le logiciel R}
\subtitle{Un introduction \`{a} la programmation en R}

\author[]{Sahir Rai Bhatnagar%
\thanks{\href{https://github.com/sahirbhatnagar/atelier-R-GERAD}{https://github.com/sahirbhatnagar/atelier-R-GERAD}%
}}

\date{29 juillet 2015}

%\makebeamertitle

\maketitle

\begin{frame}{Programmation de la journée}
\begin{itemize}
\item 09H00 : Début de l'atelier
\item 10H00 - 10H20: pause
\item 12H00 - 13H00: lunch
\item 15H00 -  15H20: pause
\item 17H00 : fin de l'atelier
\end{itemize}
\end{frame}



\begin{frame}{Remerciements}
% \hspace*{-1.9cm}\parbox[t]{\textwidth}
%\frametitle{Acknowledgements}
\begin{columns}[c] % The "c" option specifies centered vertical alignment while the "t" option is used for top vertical alignment

\column{.45\textwidth} % Left column and width

\begin{itemize}
%\scriptsize
\item John Chambers
\item Ross Ihaka et Robert Gentleman
\item Greg Voisin
\item Dr. Vahid Partovi Nia
\item Toi
\end{itemize}

\column{.45\textwidth} % Right column and width
\begin{figure}
\includegraphics[width=0.6\columnwidth]{gerad.png}\\[2mm]
\includegraphics[width=0.6\columnwidth]{udem.png}\\[5mm]
\includegraphics[width=0.6\columnwidth]{hec.png}
%\includegraphics[width=0.7\columnwidth]{Logo-LUDMER.jpg}
\end{figure}

\end{columns}
\end{frame}


\begin{frame}{Avis \#1}
\begin{itemize}
\item Ceci est une \textbf{introduction} au langage R
\pause \item On va faire beaucoup d'exercices
\pause \item N'h\'{e}sitez pas \`{a} posez des questions
\end{itemize}
\end{frame}

\begin{frame}{Avis \#2}
\begin{figure}
\includegraphics[width=1.0\columnwidth]{rstudio.png}\\[5mm]
\includegraphics[width=0.2\columnwidth]{rlogo.png}\\[5mm]
%\includegraphics[width=0.2\columnwidth]{LaTeX_logo.png}
\end{figure}

\textit{Je n'ai aucune relation commerciale avec ces logiciels}

\end{frame}

\begin{frame}{Avis \#3}

\begin{itemize}
\item Le mat\'{e}riel pour cet atelier est bas\'{e} sur plusieurs ressources
\item Voir ce lien pour une liste compl\`{e}te de r\'{e}f\'{e}rences: \href{https://github.com/sahirbhatnagar/atelier-R-GERAD}{https://github.com/sahirbhatnagar/atelier-R-GERAD}
\item Je vous sugg\`{e}re les livres de Vincent Goulet et Hadley Wickham
\end{itemize}

\begin{columns}[c] % The "c" option specifies centered vertical alignment while the "t" option is used for top vertical alignment
\column{.45\textwidth} % Left column and width
\begin{figure}
\includegraphics[width=0.8\columnwidth]{goulet.png}
\end{figure}

\column{.45\textwidth} % Right column and width
\begin{figure}
\includegraphics[width=0.6\columnwidth]{had.jpg}
\end{figure}
\end{columns}

\end{frame}


\begin{frame}[plain]{C'est parti}
\hspace*{-1.5cm}\parbox[t]{\textwidth}{
\begin{center}
\includegraphics[scale=0.51]{introR.jpg}
\end{center}
}
\end{frame}


\setbeamercolor{normal text}{fg=black,bg=background}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
\begin{block}{Après cet atelier vous devriez \^{e}tre capables de}
\begin{itemize}
\item Comprendre, créer et modifier les 4 objets de bases en R (\code{vector, data.frame, matrix, list}) 
\item Utiliser des fonctions de bases
\item Importer un jeux de données à partir d'un fichier externe
\item Créer un graphique 
\end{itemize}
\end{block}
}
\end{frame}


\section{1.Pr\'{e}sentation du langage R}

\setbeamercolor{normal text}{fg=gray,bg=black}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
 \begin{center}
  \Huge{\textcolor{white}{1. Pr\'{e}sentation du langage R}}
 \end{center}
 }
\end{frame}


\setbeamercolor{normal text}{fg=black,bg=background}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
\begin{block}{Objectifs du chapitre}
\begin{enumerate}
\item Comprendre les avantages d'apprendre R
\item Conna\^{\i}tre la provenance du R et ses caract\'{e}ristiques
\item D\'{e}marrer une session R et ex\'{e}cuter des commandes simples
\item Cr\'{e}er, modifier et sauvegarder ses propres fichiers de \mbox{script R}
\end{enumerate}
\end{block}
}
\end{frame}



\setbeamercolor{normal text}{fg=gray,bg=white}
\subsection{Pourquoi \^{e}tes-vous l\`{a}?}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Pourquoi vous \^{e}tes l\`{a}?}}
 \end{center}
\end{frame}


\begin{frame}{Le langage R gagne en popularit\'{e}}

\vspace{0.1in}

\begin{center}
\includegraphics[scale=0.40]{rankings.png}
\end{center}

\vspace{0.2in}

Les meilleurs langages de programmation en 2015 selon \href{http://spectrum.ieee.org/computing/software/the-2015-top-ten-programming-languages}{\mbox{IEEE Spectrum}} \\
\end{frame}


\begin{frame}{Plus de 100 000 questions pos\'{e}es dans les forums}

\includegraphics[scale=0.40]{stack.png}
\newline
\vspace{0.1in}
%\footenotesize{source: http://r4stats.com/articles/popularity/}
\end{frame}




\begin{frame}{Nombre d'emplois}

\begin{center}
\includegraphics[scale=0.47]{jobs.png}
\end{center}

\vspace{0.05in}

r\'{e}f\'{e}rence: \href{http://r4stats.com/articles/popularity/}{http://r4stats.com/articles/popularity/}\\

\end{frame}



\begin{frame}{Utilis\'{e} dans plusieurs domaines}

\begin{center}
\includegraphics[scale=0.31]{citeR.jpg}
\end{center}

\vspace{0.05in}

Publi\'{e} dans \href{http://www.nature.com/news/programming-tools-adventures-with-r-1.16609}{\textit{Nature}}
\end{frame}


\begin{frame}{Analyser vos données}
\begin{itemize}
  \setlength\itemsep{2em}
\item Plusieurs ressources d'outils statistiques
\item Représenter graphiquement des jeux de données multivariables
\item Intégrer votre code R dans des applications web
\item Assurer la reproductivité de vos analyses
\end{itemize}
\end{frame}



\subsection{Bref historique}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Bref historique}}
 \end{center}
\end{frame}


\begin{frame}{\`{A} l'origine de R fut le S par John M. Chambers}
\begin{center}
\begin{figure}
\includegraphics[scale=0.10]{john.jpg}
\caption{S, un langage pour programmer avec des donn\'{e}es, developp\'{e} chez Bell Laboratories dans les ann\'{e}es 1970 par une \'{e}quipe de chercheurs men\'{e}e par John M. Chambers}
\end{figure}
\end{center}
\end{frame}


\begin{frame}{Cr\'{e}ateurs}
\begin{center}
\begin{figure}
\includegraphics[scale=0.60]{rr.jpg}
\caption{Inspir\'{e}s par le S, Ross Ihaka (gauche) et Robert Gentleman (droite) de l'Universit\'{e} d'Auckland en Nouvelle-Z\'{e}lande ont lanc\'{e} la premi\`{e}re version de R en 1996}
\end{figure}
\end{center}
\end{frame}


\begin{frame}{Logiciel Libre}
\begin{itemize}
  \setlength\itemsep{2em}
\item 1990-2010: le S a principalement \'{e}t\'{e} popularis\'{e} par une mise en oeuvre commerciale nomm\'{e}e S-PLUS
\pause \item Fin des ann\'{e}es 2000: L'utilisation de S-PLUS diminue en faveur du R, surtout dans les milieux acad\'{e}miques
\pause \item 2 raisons qui ont fortement contribu\'{e} \`{a} la perte d'influence de S-PLUS
\begin{enumerate}
\item \normalsize Disponible gratuitement
\pause \item Ouvert aux contributions de tous
\end{enumerate}
\end{itemize}
\end{frame}



\subsection{Caract\'{e}ristiques de R}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Caract\'{e}ristiques de R}}
 \end{center}
\end{frame}



\begin{frame}{Langage de programmation orientée objet}
\begin{itemize}
  \setlength\itemsep{2em}
\item Cela permet de facilement trouver et ré-utiliser les résultats de tes analyses
\pause \item Une fonction peut compléter plusieurs t\^{a}ches
\end{itemize}
\end{frame}


\begin{frame}{Langage de programmation interpr\'{e}t\'{e}}
\begin{itemize}
  \setlength\itemsep{2em}
\item Langage de programmation interpr\'{e}t\'{e} (versus \code{C}, \code{C++}, \code{JAVA})
\item Plus accessible qu'un langage compilé $\rightarrow$ ce qui permet aux économistes, écologistes, biologistes, statisticiens, épidémiologistes, etc. d'utiliser R  
\pause \item Le programme que l'on lance pour utiliser R est l'interpr\`{e}te
\pause \item Celui-ci prend des commandes en R qu'il ex\'{e}cutera imm\'{e}diatement
\pause \item  Autre exemple: \code{Python}
\end{itemize}
\end{frame}


\begin{frame}{Logiciel libre (\textit{Open Source})}

\begin{itemize}
  \setlength\itemsep{1.5em}
\item D\'{e}veloppement actif pour la cr\'{e}ation de nouveaux outils dans plusieurs domaines  
\begin{itemize}
\item \href{https://cran.r-project.org/web/views/}{https://cran.r-project.org/web/views/}
\end{itemize} 
\item Facilement voir le code des autres avec GitHub 
\begin{itemize}
\item \href{http://www.r-pkg.org/}{http://www.r-pkg.org/}
\end{itemize}
\item Bien documenter avec beaucoup de ressources gratuites disponibles sur l'internet  
\begin{itemize}
\item \href{http://stackoverflow.com/questions/tagged/r}{stackoverflow}
\item \href{http://www.rdocumentation.org/}{http://www.rdocumentation.org/} \item \href{http://www.r-bloggers.com/}{http://www.r-bloggers.com/} 
\item \href{https://twitter.com/search?q=\%23rstats}{twitter} 
\item \href{http://blog.revolutionanalytics.com/local-r-groups.html}{R user groups}
\item \href{https://www.google.ca/}{Google}
\end{itemize}
\end{itemize}

%\begin{center}
%\begin{figure}
%\includegraphics[scale=0.35]{meta.png}
%\caption{\href{http://www.r-pkg.org/}{http://www.r-pkg.org/}}
%\end{figure}
%\end{center}

\end{frame}



\begin{frame}[fragile]{Outil statistique qui optimize l'approche matricielle}

\begin{itemize}
  \setlength\itemsep{2em}
\item Langage bas\'{e} sur la notion de vecteur, ce qui simplifie les calculs math\'{e}matiques (non seulement la computation mais l'écriture aussi)
\pause \item R\'{e}duit consid\'{e}rablement le recours aux structures it\'{e}ratives
(boucles \code{for, while} , etc.)
\end{itemize}
\pause 
<<rcode=TRUE>>=
c(1,2,3) + c(4,5,6)
@

%\begin{center}
%\begin{figure}
%\includegraphics[scale=0.35]{meta.png}
%\caption{\href{http://www.r-pkg.org/}{http://www.r-pkg.org/}}
%\end{figure}
%\end{center}

\end{frame}





\begin{frame}[fragile]{O\`{u} trouver de l'aide pour une fonction}
\begin{itemize}
  \setlength\itemsep{2em}
%\item Pour l'aide g\'{e}n\'{e}ral: \texttt{help.start()} 
%\item Lorsque l'on conna\^{i}t le nom de la commande R: 
%\item \mbox{\texttt{help(nom de la fonction)}} 
\item \mbox{\texttt{?nom\_de\_la\_fonction}}
%\item \`{A} partir des mot-cl\'{e}s: \texttt{??mot cl\'{e}}
%\begin{itemize}
%\item exemple: \code{??regression}
%\end{itemize}
%\item Toutes les commandes fournies par un package: \code{help(package=nom du package)}
%\begin{itemize}
%\item exemple: \code{help(package = datasets)}
%\end{itemize}
%\item F1 sur votre clavier 
\end{itemize}

\pause 
<<rcode=TRUE, eval=FALSE>>=
# l'aide pour la fonction de régression linéaire 'lm'
?lm
@
\end{frame}


\begin{frame}{La rubrique d'aide}
\begin{itemize}
  \setlength\itemsep{2em}
\item \textbf{Usage:} le nom de la fonction, tous ses arguments et les valeurs par défaut
\pause \item \textbf{Value:} le type d'objet retourné par la fonction
\end{itemize}
\end{frame}


%\begin{frame}{Clavier Mac}
%\vspace{0.1in}
%\begin{center}
%\includegraphics[scale=0.40]{mackey.jpg}
%\end{center}
%\end{frame}

%\begin{frame}{Clavier PC}
%\vspace{0.1in}
%\begin{center}
%\includegraphics[scale=0.40]{pckey.jpg}
%\end{center}
%\end{frame}



%\subsection{Bref Historique et description}





\subsection{D\'{e}marrer une session}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{D\'{e}marrer une session}}
 \end{center}
\end{frame}


\begingroup
\makeatletter
\setlength{\hoffset}{-.5\beamer@sidebarwidth}
\makeatother
\begin{frame}[fragile, plain]
<<label, rcode=TRUE, eval=FALSE>>=
# Démarrer l'interface pour la documentation
# et naviguer les différentes ressources
help.start()

# trouver l'aide pour la fonction rnorm
?rnorm

# Connaitre le répertoire de travail
getwd()
@
\end{frame}

%\begin{frame}[fragile, plain]
%<<rcode=TRUE, eval=FALSE>>=
%@
%\end{frame}




\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# On additionne
39 + 3

# On soustrait
58 - 16

# On multiplie
6 * 7

# Et on peut même diviser
8 / 3
@
\end{frame}



\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# Générer deux vecteurs de nombres pseudo-aléatoires
# issus d’une loi normale centrée réduite.
x <- rnorm(50)
y <- rnorm(50)

# Graphique des couples (x, y)
plot(x, y)

# Graphique d'un histogramme de x
hist(x)
@
\end{frame}


\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# voir la matière de x
x

# voir les objets de votre workspace
ls()

# supprimer les deux vecteurs x et y
rm(x,y)

# voir la matière de x
x

# voir les objets de votre workspace
ls()
@
\end{frame}


\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# Générer la suite 1, 2, ..., 20.
x <- 1:20

# créer un autre vecteur en fonction de x
y <- 2*x+3

# créer un data frame de deux colonnes et
# voir sa matière 
dt <- data.frame(x, y)
dt

# estimer un modèle linéaire et voir les
# résultats
fit <- lm(y ~ x, data = dt)
summary(fit)
@
\end{frame}

\endgroup


\begin{comment}
\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# La fonction ’seq’ sert à générer des suites 
# plus générales.
seq(from = -5, to = 10, by = 3)
seq(from = -5, length = 10)

# La fonction ’rep’ sert à répéter des valeurs.
rep(1, 5) # répéter 1 cinq fois
rep(1:5, 5) # répéter le vecteur 1,...,5 cinq fois
rep(1:5, each = 5) # répéter chaque élément cinq fois
@
\end{frame}



\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# Arithmétique vectorielle
v <- 1:12  # initialisation d’un vecteur
v + 2 # additionner 2 à chaque élément de v
v * -12:-1 # produit élément par élément
v + 1:3 # le vecteur le plus court est recyclé

# Vecteur de nombres uniformes sur 
# l’intervalle [1, 10]. Le point-virgule
# signifie une nouvelle ligne
v <- runif(12, min = 1, max = 10); v

# Pour afficher le résultat d’une affectation,
# placer la commande entre parenthèses.
( v <- runif(12, min = 1, max = 10) )
@
\end{frame}




\begin{frame}[fragile, plain]
<<rcode=TRUE, eval=FALSE>>=
# trouver le répertoire où se trouve le
# jeux de données 'morley', qui est inclu avec
# l'installation de R
filepath <- system.file("data", "morley.tab", 
            package="datasets")

# importer les données dans un objet appeller 'mm'
mm <- read.table(filepath)

# Graphique 
plot(mm$Expt, mm$Speed, 
main="Speed of Light Data", xlab="Experiment No.")

# Terminer la session
q()
@
\end{frame}
\end{comment}




\section{2.Bases du langage R}

\setbeamercolor{normal text}{fg=gray,bg=black}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
 \begin{center}
  \Huge{\textcolor{white}{2. Bases du langage R}}
 \end{center}
 }
\end{frame}

\setbeamercolor{normal text}{fg=black,bg=background}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
\begin{block}{Objectifs du chapitre}
\begin{enumerate}
\item Comprendre ce qui est un fonction et comment l'utiliser
\item Identifier les principaux types d'objets dans R: \code{vector, matrix, data frame} et \code{list} 
\item Cr\'{e}er et manipuler ces objets
\item Importer des fichiers \code{.txt} et \code{.csv}
\item Installer un \textit{package}
\end{enumerate}
\end{block}
}
\end{frame}



\setbeamercolor{normal text}{fg=gray,bg=white}


\subsection{Les fonctions}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Les fonctions}}
 \end{center}
\end{frame}



\begin{frame}{Définition et appel de fonctions}
\begin{itemize}
 \setlength\itemsep{2em}
\item Plutôt que d'écrire plusieurs lignes de codes pour des choses assez simples et répétitives on fait appel à des \textbf{fonctions}
\pause \item Une fonction est caractérisée par deux composantes:
\pause 
\begin{enumerate}
\normalsize
\item son \textbf{nom}: c'est ce nom qui nous permettra d'appeler la fonction
\pause \item une \textbf{liste d'arguments}: ce sont les informations dont la fonction a besoin pour travailler et renvoyer son résultat
\end{enumerate}
\end{itemize}
\end{frame}





\begin{frame}[fragile]{La syntaxe pour appeler une fonction}
\begin{itemize}
 \setlength\itemsep{2em}
\item Il faut écrire son nom suivi de parenthèses
\pause \item Entre ces parenthèses, nous indiquerons les arguments dont la fonction a besoin:
\begin{center}
\code{nom\_de\_la\_fonction(arguments)}
\end{center}
\end{itemize}
\pause 
<<rcode=TRUE, tidy=FALSE, eval=FALSE>>=
# chercher la rubrique d'aide pour racine carrée
?sqrt

# on voit que la fonction prend un argument
sqrt(49)
@

\end{frame}



\begin{frame}[fragile]{Arguments facultatifs}
\begin{itemize}
 \setlength\itemsep{0.5em}
\item Certaines fonctions nécessitent plusieurs arguments et certains de ces arguments sont optionnels (aussi possible d'avoir aucun argument: \code{getwd()}) 
\pause \item Les arguments optionnels possèdent une valeur par défaut
\pause \item Si on ne spécifie pas de valeur, ces arguments prendront la valeur définie par défaut, sinon ils prendront la valeur spécifiée
\end{itemize}
\pause 

<<rcode=TRUE, tidy=FALSE, eval=FALSE, size='footnotesize'>>=
# chercher la rubrique d'aide pour logarithme
?log

# on ne précise pas de valeur pour le second argument
log(2)

# On peut spécifier le second argument en l'appelant par son nom
log(2, base = exp(1))
@

\end{frame}




\subsection{Les objets R}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Les objets R}}
 \end{center}
\end{frame}


%\begin{frame}[<+->]{Les objets R}
%\begin{itemize}
%  \setlength\itemsep{2em}
%\item Tout dans le langage R est un objet:
%\begin{itemize}
%\item les variables contenant des données
%\item les fonctions, 
%\item les opérateurs, même le symbole représentant le nom d’un
%objet est lui-même un objet.
%\end{itemize}
%\end{itemize}
%\end{frame}




\begin{frame}{Les objets R}

%\begin{itemize}
%  \setlength\itemsep{2em}
%\item Les structures de données peuvent être organisées par: 
%\pause
%\begin{enumerate}
%\item leur dimension (1d, 2d, ou nd) 
%\item si elles sont homogène ou hétérogène
%\end{enumerate}
%\pause \item Cela donne lieu à 5 types de données les plus souvent utilisées %dans l'analyse des données:
%\end{itemize}
%\pause 
\ctable[caption={Les principaux objets en R et le nom de leurs fonctions},label=tab:table1,pos=h!,doinside=\small]{ccccc}{\tnote{tous les éléments doivent être du même type}\tnote[b]{les éléments peuvent être de différents types}
}{
    																\FL
dimension	&  & homogène\tmark	    &	& hétérogène\tmark[b] \ML
1d & & Atomic vector & & List \NN
   & &    \code{c()} & & \code{list()} \ML
2d & & Matrix & & Data frame \NN
   & &  \code{matrix()} & & \code{data.frame()} \LL
}

\end{frame}


\begin{frame}[fragile]{\textit{Atomic vectors}}

\begin{itemize}
  \setlength\itemsep{2em}
\item En R, à toutes fins pratiques, tout est un vecteur
\pause \item La fonction de base pour créer un vecteur est \code{c()} (concaténation)
\end{itemize}
\pause
<<rcode=TRUE, eval = TRUE, tidy = FALSE>>=
c(1, 2, 5)
@

\end{frame}




\begin{frame}[fragile]{\textit{Atomic vectors}}

\begin{itemize}
  \setlength\itemsep{2em}
\item Les quatre types d'\textit{atomic vectors} les plus utilisés: 
\begin{enumerate}
\item \textit{double} (également appelé \textit{numeric})
\item \textit{integer}
\item \textit{character}
\item \textit{logical}
\end{enumerate}
\end{itemize}
\pause
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
c(1, 2.5, 4.5) # numeric
c(1L, 6L, 10L) # integer
c("ceci sont", "des characters") #character
c(TRUE, FALSE, T, F) # logical
@

\end{frame}






\begin{comment}
\begin{frame}[fragile]{Test}

\begin{itemize}
  %\setlength\itemsep{1em}
\item \code{typeof()}: pour savoir quel type de vector
\item \code{is.character(), is.double(), is.integer(), is.logical(), is.atomic()}: pour vérifier si c'est un cas spécifique 
\end{itemize}
\pause
<<rcode=TRUE, eval = TRUE, tidy = FALSE, size = 'footnotesize'>>=
int_var <- c(1L, 6L, 10L)
typeof(int_var)
is.integer(int_var)
is.atomic(int_var)
@

\end{frame}



\begin{frame}[fragile]{Test}

<<rcode=TRUE, eval = TRUE, tidy = FALSE>>=
dbl_var <- c(1, 2.5, 4.5)
typeof(dbl_var)
is.double(dbl_var)
is.atomic(dbl_var)
@

\end{frame}
\end{comment}


\begin{frame}[fragile]{\textit{Coercion}}

\begin{itemize}
  \setlength\itemsep{1em}
\item Tous les éléments d'un \textit{atomic vector} doivent être du même type
\pause \item Lorsque vous essayez de combiner différents types, ils seront convertis au type le plus flexible
\pause \item Types du moins au plus flexible sont:
\begin{enumerate}
\item \textit{logical} 
\item \textit{integer} 
\item \textit{double} 
\item \textit{character}
\end{enumerate}
\end{itemize}
<<rcode=TRUE, eval = TRUE, tidy = FALSE>>=
# combiner un character et integer donne un character
str(c("a", 1))
@
\end{frame}



\begin{frame}[fragile]{\textit{Coercion}}
\begin{itemize}
\item La plupart des opérations mathématiques vont convertir un \textit{atomic vector} à un \textit{double} ou \textit{integer}
\end{itemize}
<<rcode=TRUE, eval = TRUE, tidy = FALSE, size = 'footnotesize'>>=
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
# Nombre total de TRUE
sum(x)
# La proportion de TRUE
mean(x)
@
\end{frame}


\begin{frame}[fragile]{\textit{List}}

\begin{itemize}
  %\setlength\itemsep{2em}
\item Les \textit{lists} sont différent des \textit{atomic vectors} parce que leurs éléments peuvent \^{e}tre de tout type
\item La fonction pour créer un \textit{list} est \code{list()}
\end{itemize}
\pause
<<rcode=TRUE, eval = TRUE, tidy = FALSE, size = 'footnotesize'>>=
(x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9)))
@

\end{frame}



\begin{comment}
\begin{frame}[fragile]{Attributs}

\begin{itemize}
  %\setlength\itemsep{2em}
\item Les attributs d'un objet sont des éléments d'information additionnels liés à cet objet
\item Pour chaque attribut, il existe une fonction du même nom servant à extraire l'attribut correspondant d’un objet
\end{itemize}

\ctable[caption={Attributs les plus usuels d'un objet},label=tab:table1,pos=h!,doinside=\small]{ccccc}{
}{
    																\FL
Attribut	&  & Utilisation \ML
class & & affecte le comportement d’un objet \\
dim & & dimensions des matrices et tableaux \\
dimnames & & étiquettes des dimensions des matrices et tableaux \\
names & & étiquettes des éléments d’un objet\LL
}
\end{frame}
\end{comment}





\begin{frame}[fragile]{\textit{Matrix}}

\begin{itemize}
  \setlength\itemsep{1em}
\item Les matrices ne sont rien d'autre que des vecteurs en 2 dimensions
\pause \item Surtout utilisées pour faire les calculs mathématiques (pensez à vos cours d'algèbre linéaire)
\pause \item La fonction pour créer un \textit{matrix} est \code{matrix()}
\end{itemize}
\pause
<<rcode=TRUE, eval = TRUE, tidy = FALSE, size = 'normalsize'>>=
# rempli par colonne par défaut
matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
@

\end{frame}


\begin{frame}[fragile]{\textit{Matrix}}

<<rcode=TRUE, eval = TRUE, tidy = FALSE, size = 'normalsize'>>=
# automatiquement converti en données homogènes
matrix(c(1,2,3,"a","b","c"), nrow = 2, ncol = 3)
@

\end{frame}





\begin{frame}[fragile]{\textit{Data frame}}

\begin{itemize}
  \setlength\itemsep{0.5em}
\item Le \textit{data frame} est un tableau de données hétérogènes
%\pause \item Utiliser lorsque différents sortes de données ont étés collecter sur les m\^{e}mes sujets (essaie clinique) 
\pause \item La fonction pour créer un \textit{data frame} est \code{data.frame()}
\end{itemize}
\pause
<<rcode=TRUE, eval = TRUE, tidy = FALSE, size = 'normalsize'>>=
# une colonne 'id' pour identifier les sujets
# une colonne 'age' pour leur age
data.frame(id = c("didier","patrice","laurent"),
           age = c(37,34,32))
@

\end{frame}




\begin{frame}[fragile]{La différence entre \textit{data frame} et \textit{matrix}?}

\begin{itemize}
  \setlength\itemsep{2em}
  \normalsize
\item \code{matrix}: calculs matriciels
%\pause \item Utiliser lorsque différents sortes de données ont étés collecter sur les m\^{e}mes sujets (essaie clinique) 
\item \code{data.frame}: toutes autres analyses de données hétérogènes
\end{itemize}

\end{frame}




\subsection{Commandes R}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Commandes R}}
 \end{center}
\end{frame}


\begin{frame}[fragile]{Expression et affectation} 
\begin{enumerate}
\item Une \textbf{expression} est immédiatement évaluée et le résultat est affiché à l’écran:
\pause
<<rcode=TRUE, eval = TRUE, tidy = TRUE>>=
2+3;pi;cos(pi/4)
@
\seti
\end{enumerate}

\end{frame}


\begin{frame}[fragile]{Expression et affectation} 
\begin{enumerate}
\conti
\item Lors d’une \textbf{affectation}, une expression est évaluée, mais le résultat est stocké dans un objet (variable) et rien n’est affiché à l’écran
\begin{itemize}
\item Le symbole d’affectation est <-  
\item les deux caractères < et - placés obligatoirement l'un à la suite de l'autre:
\end{itemize}
\pause
<<rcode=TRUE, eval = TRUE, tidy = TRUE>>=
a <- 5
a
b <- a - 2
b
@
\seti
\end{enumerate}

\end{frame}

\begin{comment}
\begin{frame}[fragile]{Expression et affectation} 
\begin{enumerate}
\conti
\item Pour affecter le résultat d’un calcul dans un objet et simultanément afficher ce résultat, il suffit de placer l'affectation entre parenthèses pour ainsi créer une nouvelle expression
\pause
<<rcode=TRUE, eval = TRUE, tidy = TRUE>>=
(a <- 2 + 3)
@
\pause \item Le signe = est valide également, mais il n'est pas recommendé de l'utiliser dans ce contexte
\begin{itemize}
\item cette pratique est susceptible d'engendrer de la confusion avec les constructions \code{nom = valeur} dans les appels de fonction
\end{itemize}

\end{enumerate}
\end{frame}
\end{comment}


\begin{comment}
\begin{frame}[fragile]{Conventions pour les noms d'objets}
\begin{itemize}
  \setlength\itemsep{2em}
\item Les caractères permis pour les noms d'objets: 
\begin{enumerate}
\item les lettres minuscules a–z 
\item les lettres majuscules A–Z
\item les chiffres 0–9, 
\item le point .
\item le caractère de soulignement \_
\end{enumerate}
\pause \item Il est permis d'utiliser des lettres accentuées, mais cette pratique est fortement découragée puisqu'elle risque de nuire à la portabilité du code
\end{itemize}

\end{frame}


\begin{frame}[fragile]{Conventions pour les noms d'objets}
\begin{itemize}
  \setlength\itemsep{2em}
\item Le R est sensible à la casse, ce qui signifie que \code{foo, Foo et FOO} sont trois objets distincts
\pause \item Certains noms sont utilisés par le système R. Mieux éviter d’utiliser 
\begin{center}
\code{c, q, t, C, D, I, diff, length, mean, pi, range, var, sd}\\
\code{break, else, for, function, if, in, next, repeat, return, while}\\
\code{TRUE, FALSE, T, F}\\
\code{Inf, NA, NaN, NULL}
\end{center}
\end{itemize}

\end{frame}
\end{comment}



\begin{frame}[fragile]{Indexation d'un \textit{vector}}
\begin{itemize}
  \setlength\itemsep{2em}
\item L'indexation sert principalement à deux choses
\pause \begin{enumerate}
\normalsize
\item extraire des éléments 
\item remplacer des éléments
\end{enumerate}
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# création d'un vecteur
x <- c(a = -1, b = 2, c = 8, d = 10) 

# extraction par position
x[1]

# extraction par étiquette
x["c"]

# remplacer le deuxième élément par 5
x[2] <- 5
@
\end{frame}



\begin{frame}[fragile]{Indexation d'un \textit{data frame} et \textit{matrix}}

\begin{itemize}
  \setlength\itemsep{2em}
\item L'indexation des observations se fait à partir des rangées et colonnes du \textit{data frame} et \textit{matrix}:
\begin{center}
\code{d[rangée,colonne]}
\end{center}

\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE, size='small'>>=
# création d'un data frame
d <- data.frame(Noms = c("Pierre", "Jean", "Jacques"),
Age = c(42, 34, 19),
Fumeur = c(TRUE, TRUE, FALSE))

d[1, ] # première rangée

d[ ,1] # première colonne 

d[3,2] # troisième rangée, deuxième colonne
@
\end{frame}




\begin{frame}[fragile]{Indexation d'un \textit{list}}

<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# création d'un list
x <- list(joueur = c("V", "C"),
		  score = c(10, 12))
		  
# premier élément de la list
x[[1]]

# 1er élément du 2e élément de la list
x[[2]][1]
@
\end{frame}


\begin{frame}[fragile]{Importer et enregistrer des données et du code}



\ctable[caption={Les fonctions de bases pour importer et enregistrer des données et du code R},label=tab:table1,pos=h!,doinside=\small]{lccc}{\tnote{chaque valeur est séparée par un espace}\tnote[b]{chaque valeur est séparée par une virgule}\tnote[c]{objets dans ton espace de travail (Environment)}
}{
    																\FL
        	  & fichiers	           &	 objets\tmark[c]  &    script R\ML
importer  & \code{read.table()\tmark} &       \code{load()} &   \code{source()}    \NN
          &  \code{read.csv()\tmark[b]}  &                 &                 \ML
enregistrer  & \code{write.table()} &  \code{save()} &   File -> Save As..         \NN
             & \code{write.csv()}   &    \LL
} 


\end{frame}


\begin{frame}[fragile]{Importer des données}
\begin{itemize}
  \setlength\itemsep{2em}
\item Il est nécessaire de préciser le chemin d'accès au fichier s'il n'est pas dans le répertoire de travail
\begin{itemize}
\normalsize
\pause \item \code{getwd()}: conna\^{i}tre le répertoire de travail
\pause \item \code{setwd()}: modifier le répertoire de travail
\end{itemize}
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# modifier le répertoire de travail
setwd("~/git_repositories/atelier-R-GERAD/data")

# importer les fichiers
# affectation aux objets 'lung' et 'admit'
lung <- read.csv("lung.csv")

admit <- read.table("admit.txt")
@
\end{frame}




\begin{frame}[fragile]{Importer du code R à partir d'un script}

<<rcode=TRUE, eval = FALSE, tidy = FALSE, size = 'small'>>=
# modifier le répertoire de travail
setwd("~/git_repositories/atelier-R-GERAD/script")

# exécute les commandes R du script 'mtcars.R'
# et montre le output
source("mtcars.R", echo = TRUE)

# sauvegarde les objets du environment
save(df, fit, file = "mtcars.RData")

# supprime les objets de ton environment
rm(df, fit)

# importer les objets R de 'mtcars.RData'
load("mtcars.RData")
@
\end{frame}




\begin{frame}[fragile]{Installer des \textit{packages} additionnels dans R}

\begin{itemize}
  \setlength\itemsep{1em}
\item Un \textit{\textbf{package}} R est un ensemble cohérent de fonctions, de jeux de données et de documentation permettant de compléter les fonctionnalités du
système ou d'en ajouter de nouvelles
\item La liste complète de ces packages est disponible sur le site \href{http://www.r-pkg.org/}{METACRAN}
\end{itemize}
\pause
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# installer des packages pour créer des rapports
# reproductibles
install.packages(c("knitr","rmarkdown"))

# pour avoir accès aux fonctions dans ces packages
library(knitr)
library(rmarkdown)
@
\end{frame}


\subsection{Sommaire}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Sommaire}}
 \end{center}
\end{frame}




\begin{frame}{Sommaire des commandes de bases}
 %\hspace*{-1.9cm}\parbox[t]{\textwidth}{
\begin{tikzpicture}
\node (expr) [startstop] {\code{sessionInfo()}
\code{install.packages()}
\code{library()}\textcolor{pinkish}{texxxx}
\code{setwd()}\textcolor{pinkish}{teccc}
\code{getwd()}\textcolor{pinkish}{teccc}
\code{rm()}\textcolor{pinkish}{tevvvvvvv}
\mbox{\code{ls()}\textcolor{pinkish}{tevvvvvvv}}  };
\node (fat) [startstop2, below of=expr, xshift=-.3cm, yshift=-2.0cm] {\code{c()}
\code{data.frame()}
\code{matrix()}
\code{list()}};
\node (script) [startstop3, below of=fat, xshift=.1cm, yshift=-1.5cm] {
\code{read.table()}
\code{write.table()}
\code{load()}
\code{save()}\textcolor{beige}{text}
\code{source()}};
\draw[decoration={brace,raise=5pt, amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]expr.south west) -- ([yshift=1pt]expr.north west) node [black,midway,xshift=-2cm] 
{\footnotesize Espace de travail};
\draw[decoration={brace,raise=5pt,amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]fat.south west) -- ([yshift=1pt]fat.north west) node [black,midway,xshift=-2.6cm] 
{\footnotesize Objets R les plus utilisés};
\draw[decoration={brace,raise=5pt,amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]script.south west) -- ([yshift=1pt]script.north west) node [black,midway,xshift=-3cm] 
{\footnotesize Accéder les données et scripts R};
\end{tikzpicture}
%}
\end{frame}




\section{3. Graphiques}

\setbeamercolor{normal text}{fg=gray,bg=black}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
 \begin{center}
  \Huge{\textcolor{white}{3. Graphiques}}
 \end{center}
 }
\end{frame}

%\begin{comment}
\setbeamercolor{normal text}{fg=black,bg=background}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
\begin{block}{Objectifs du chapitre}
\begin{enumerate}
\item Comprendre la syntaxe de la fonction \code{plot}
\item Créer des \code{boxplot, histogram} et \code{density} plot
\item Comment sauvegarder des graphiques
\end{enumerate}
\end{block}
}
\end{frame}



\setbeamercolor{normal text}{fg=gray,bg=white}
\subsection{La fonction plot}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{La fonction \code{plot}}}
 \end{center}
\end{frame}



\begin{frame}[fragile]{Introduction aux graphiques en R}
\begin{itemize}
  \setlength\itemsep{2em}
  \item R offre une variété de graphiques remarquables 
  \item Pour avoir une petite idée des possibilités offertes, il suffit de taper la commande \code{demo(graphics)} 
\end{itemize}
\end{frame}


\begin{frame}[fragile]{La fonction \code{plot}}

\begin{itemize}
  \setlength\itemsep{2em}
\item La fonction \code{plot} peut prendre plusieurs arguments et types d'objets
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# Plot des valeurs d'un vecteur contre leurs indices
# équivalent à plot(mtcars[,"mpg"])
plot(mtcars$mpg, xlab = "Index", ylab = "mpg", 
    main = "Titre") 

# Graphique des couples (x, y)
plot(mtcars$mpg, mtcars$disp, xlab = "mpg", 
ylab = "disp", main = "mpg vs. disp")
@

\end{frame}


\begin{frame}[fragile]{La fonction \code{plot}}

\begin{itemize}
  \setlength\itemsep{1.5em}
\item La fonction \code{plot} peut aussi prendre un objet du modèle linéaire comme argument
\pause \item Ceci est un exemple qui démontre pourquoi R est un langage orientée objet
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# importer 'mtcars.RData'
load("mtcars.RData") 

# Graphiques des 4 diagnostiques
# du modèle linéaire
# placer dans 2 rangés et 2 colonnes
par(mfrow=c(2,2))
plot(fit)
@

\end{frame}


\subsection{\code{histogram} et \code{boxplot}}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{\code{histogram} et \code{boxplot}}}
 \end{center}
\end{frame}



\begin{frame}[fragile]{La fonction \code{histogram}}

\begin{itemize}
  \setlength\itemsep{1.5em}
  \item Utile pour voir la distribution des données
\item Pour les données continues et univariées
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# la taille de 237 étudiants disponibles dans le jeu
# de données 'survey' du library(MASS)
library(MASS) 

# voir le nom des colonnes
names(survey)

# histogram de la taille et montrer la fréquence
# de chaque barre
hist(survey$Height, labels = TRUE)
@

\end{frame}





\begin{frame}[fragile]{La fonction \code{boxplot}}

\begin{itemize}
  \setlength\itemsep{2em}
\item Utile pour voir la différence d'une variable continue parmi plusieurs groupes
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# visualiser la différence de taille entre les 
# hommes et les femmes dans le jeux
# de données 'survey' du library(MASS)

boxplot(survey$Height ~ survey$Sex, 
         ylab = "Taille (cm)",
         col = c("lightpink","lightblue"))
@

\end{frame}


\begin{frame}[fragile]{Sauvegarder les graphiques}

\begin{itemize}
  \setlength\itemsep{2em}
\item 2 fonctions principales: \code{pdf()} et \code{png()}
\item l'argument de ces fonctions est le nom du fichier désiré
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# enregistrer dans le répertoire de travail courant
pdf("boxplot_survey.pdf")
boxplot(survey$Height ~ survey$Sex, 
         ylab = "Taille (cm)")
dev.off()
@

\end{frame}



\subsection{Sommaire}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Sommaire}}
 \end{center}
\end{frame}




\begin{frame}{Sommaire des commandes de graphiques}
 %\hspace*{-1.9cm}\parbox[t]{\textwidth}{
\begin{tikzpicture}
\node (expr) [startstop] {\code{plot()}
\code{hist()}\textcolor{pinkish}{texxxx}
\code{boxplot()}\textcolor{pinkish}{texxxx} };
\node (fat) [startstop2, below of=expr, xshift=-.3cm, yshift=-2.0cm] {\code{xlab}
\code{ylab}\textcolor{background}{textttt}
\code{main}\textcolor{background}{textttt}
\code{type}\textcolor{background}{textttt}
\code{col}\textcolor{background}{textttt}};
\node (script) [startstop3, below of=fat, xshift=.1cm, yshift=-1.5cm] {\code{pdf()}
\code{png()}\textcolor{beige}{textttt}
\code{dev.off()}\textcolor{beige}{textttt}}; 
\draw[decoration={brace,raise=5pt, amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]expr.south west) -- ([yshift=1pt]expr.north west) node [black,midway,xshift=-3.1cm] 
{\footnotesize Fonctions pour créer les graphiques};
\draw[decoration={brace,raise=5pt,amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]fat.south west) -- ([yshift=1pt]fat.north west) node [black,midway,xshift=-3.4cm] 
{\footnotesize Arguments communs pour ces fonctions};
\draw[decoration={brace,raise=5pt,amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]script.south west) -- ([yshift=1pt]script.north west) node [black,midway,xshift=-3.5cm] 
{\footnotesize Fonctions pour enregistrer les graphiques};
\end{tikzpicture}
%}
\end{frame}





\section{4. Statistiques}

\setbeamercolor{normal text}{fg=gray,bg=black}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
 \begin{center}
  \Huge{\textcolor{white}{4. Statistiques}}
 \end{center}
 }
\end{frame}

\setbeamercolor{normal text}{fg=gray,bg=white}

\subsection{Moyenne, écart type}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Moyenne, écart type}}
 \end{center}
\end{frame}



\begin{frame}[fragile]{Moyenne, variance, écart type, minimum, maximum}

\begin{itemize}
  \setlength\itemsep{2em}
\item fonctions principales: \code{mean(), var(), sd(), min(), max()}
\pause \item la fonction \code{summary()} est utile pour calculer quelques statistiques de bases pour un \textit{data frame}
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# enregistrer dans le répertoire de travail courant
summary(mtcars)
@
\end{frame}




\begin{frame}[fragile]{La fonction \code{apply}}
\begin{itemize}
  \setlength\itemsep{1em}
\item Pour calculer des statistiques plus compliquées sur un \textit{data frame} (ou \textit{matrix}), on utilise la fonction \code{apply}
\pause \item La fonction \code{apply} sert à appliquer une fonction quelconque sur une partie d'un \textit{matrix} ou \textit{data frame}
\end{itemize}


\end{frame}



\begin{frame}[fragile]{La fonction \code{apply}}
\begin{itemize}
  \setlength\itemsep{1em}
\item La syntaxe de la fonction est la suivante:
\begin{center}
\code{apply(X, MARGIN, FUN)}
\end{center}
\item \code{X}: un matrix ou data frame
\item \code{MARGIN}: 1 si l'on veut faire des calculs sur les rangées, 2 sur les colonnes
\item \code{FUN}: est la fonction à appliquer
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# variance par ligne
apply(mtcars, 1, var)
@


\end{frame}









\begin{frame}[fragile]{La fonction \code{apply}}
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# variance par colonne
apply(mtcars, 2, var)

# écart type par colonne
apply(mtcars, 2, sd)

# minimum de chaque rangée
apply(mtcars, 1, min)


# maximum de chaque rangée
apply(mtcars, 1, max)
@


\end{frame}





\subsection{Test t et analyse de variance}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Test t et analyse de variance}}
 \end{center}
\end{frame}



\begin{frame}[fragile]{Test t}

\begin{itemize}
  \setlength\itemsep{1.5em}
  \item la fonction pour faire un test t est \code{t.test()}
\end{itemize}
\pause 
<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# la taille de 237 étudiants disponible dans le jeux
# de données 'survey' du library(MASS)
# est-ce qu'il y a une différence de taille entre
# les hommes et les femmes?

t.test(Height ~ Sex, data = survey)
@

\end{frame}







\begin{frame}[fragile]{Analyse de variance}

\begin{itemize}
  \setlength\itemsep{2em}
\item La fonction pour l'analyse de variance est \code{aov}
\pause \item Prenons un jeux de données disponible dans R: \code{InsectSprays}
\pause \item 6 insecticides ont été testés 12 fois en culture, la réponse observée étant le nombre d'insectes
\pause \item Le but c'est de voir s'il y a une différence importante entre les 6 insecticides par rapport à le nombre d'insectes
\end{itemize}


\end{frame}


\begin{frame}[fragile]{Analyse de variance}

<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# boxplot pour voir la différence entre
# les groupes
boxplot(InsectSprays$count ~ InsectSprays$spray)

# Les résultats ne sont pas affichés, ceux-ci sont 
# copiés dans un objet nommé aov.spray
aov.spray <- aov(count ~ spray, data = InsectSprays)

# sommaire des résultats
summary(aov.spray)
@

\end{frame}




\subsection{Modèles linéaires}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Modèles linéaires}}
 \end{center}
\end{frame}


\begin{frame}[fragile]{Les formules}

\begin{itemize}
  \setlength\itemsep{1.5em}
  \item Les formules représentent un élément-clé des analyses statistiques avec R
  \pause \item La notation utilisée est la m\^{e}me pour (presque) toutes les fonctions
  \pause \item Une formule est typiquement de la forme 
  \begin{center}
  \code{y $\sim$ model}
  \end{center} 
  \pause \begin{enumerate}
  \item \code{y}: est la réponse analysée 
  \item \code{model}: est un ensemble de termes pour lesquels les paramètres sont estimés
  \end{enumerate}
  \pause \item Ces termes sont séparés par des symboles arithmétiques mais qui ont ici une signification
  particulière: \code{a+b}, \code{a*b}
 \end{itemize}
\end{frame}




\begin{frame}[fragile]{Modèles linéaires}

<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# importer 'admit.txt'
admit <- read.table("admit.txt", header = TRUE)

# est-ce que gpa et rank sont reliés à gre
fit <- lm(gre ~ gpa+rank, data = admit)

# voir les résultats
summary(fit)
@

\end{frame}


\begin{frame}[fragile]{GLM}

<<rcode=TRUE, eval = FALSE, tidy = FALSE>>=
# régression logistique
fit.glm <- glm(admit ~ gre+gpa+rank, data = admit, 
           family = binomial(link = "logit"))

# voir les résultats
summary(fit.glm)
@

\end{frame}




\subsection{Sommaire}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Sommaire}}
 \end{center}
\end{frame}




\begin{frame}{Sommaire des commandes de statistiques}
 %\hspace*{-1.9cm}\parbox[t]{\textwidth}{
\begin{tikzpicture}
\node (expr) [startstop] {\code{mean()}
\code{var()}\textcolor{pinkish}{texxxxxx}
\code{sd()}\textcolor{pinkish}{texxxx} 
\code{min()}\textcolor{pinkish}{texxxx}
\code{max()}\textcolor{pinkish}{texxxx}
\code{median()}\textcolor{pinkish}{texxxx}
\code{apply()}\textcolor{pinkish}{texxxx}};
\node (fat) [startstop2, below of=expr, xshift=-.3cm, yshift=-2.0cm] {\code{aov()}
\code{t.test()}\textcolor{background}{textttt}
\code{chisq.test()}\textcolor{background}{textttt}};
\node (script) [startstop3, below of=fat, xshift=.1cm, yshift=-1.5cm] {\code{lm()}
\code{glm()}\textcolor{beige}{textdddttt}}; 
\draw[decoration={brace,raise=5pt, amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]expr.south west) -- ([yshift=1pt]expr.north west) node [black,midway,xshift=-3.6cm] 
{\footnotesize Fonctions pour des statistiques descriptives};
\draw[decoration={brace,raise=5pt,amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]fat.south west) -- ([yshift=1pt]fat.north west) node [black,midway,xshift=-2.1cm] 
{\footnotesize Tests statistiques};
\draw[decoration={brace,raise=5pt,amplitude=10pt},decorate,line width=1pt] 
  ([yshift=-1pt]script.south west) -- ([yshift=1pt]script.north west) node [black,midway,xshift=-3.4cm] 
{\footnotesize Fonctions pour les modèles de régression};
\end{tikzpicture}
%}
\end{frame}



\section{5. Rapports reproductibles}

\setbeamercolor{normal text}{fg=gray,bg=black}
\begin{frame}[plain]
\hspace*{-1.0cm}\parbox[t]{\textwidth}{
 \begin{center}
  \Huge{\textcolor{white}{5. Cr\'{e}er des rapports}}
 \end{center}
 }
\end{frame}

\setbeamercolor{normal text}{fg=gray,bg=white}
\subsection{Introduction}

\begin{frame}
 \begin{center}
  \Huge{\textcolor{red}{Introduction}}
 \end{center}
\end{frame}


\begin{frame}{Introduction}
\begin{itemize}
\item \href{http://rmarkdown.rstudio.com/}{http://rmarkdown.rstudio.com/}
\item \href{http://shiny.rstudio.com/gallery/}{http://shiny.rstudio.com/gallery/}
\end{itemize}
\end{frame}





\begin{frame}[fragile]{Session Information}
<<results='asis', eval = TRUE, echo = FALSE, size='footnotesize'>>=
toLatex(sessionInfo(),locale = FALSE)
@

\end{frame}













\end{document}